# Add a task. --addTask=name,[who],description,[context][,update|silent] . IF there is already a task with the same name, the request will be rejected and an error displayed to debug0. However if update is specified in that sitution, the existing entry will be updated to match the request. Alternatively silent can be specified to make it silently ignore the request. If context is not set it will default to "work". ~ doneit,task,user

parameters name,who,description,context,update,silent

load doneItLoad

# Find out if we have any tasks matching the name already
listTasks
requireItem name,^~!Local,name!~$
countToVar Local,count

# Set context
# TODO Use parameters to do this.
if ~!Local,context!~,==,,
	set Local,context,work
else
	set Local,context,~!Local,context!~

if ~!Local,count!~,==,0,
	set Local,lastTask,~!Local,name!~

	setNested DoneIt,tasks,~!Local,lastTask!~,lastWho,~!Local,who!~
	setNested DoneIt,tasks,~!Local,lastTask!~,name,~!Local,name!~
	setNested DoneIt,tasks,~!Local,lastTask!~,context,~!Local,context!~
	setNested DoneIt,tasks,~!Local,lastTask!~,description,~!Local,description!~
else
	if ~!Local,update!~,==,update,
		first
		loop
			debug 2,addTask: Updating ~!Local,name!~ context=~!Local,context!~ lastWho=~!Local,who!~
			set Local,lastTask,~!Result,name!~
			setNested DoneIt,tasks,~!Local,lastTask!~,lastWho,~!Local,who!~
			setNested DoneIt,tasks,~!Local,lastTask!~,name,~!Local,name!~
			setNested DoneIt,tasks,~!Local,lastTask!~,context,~!Local,context!~
			setNested DoneIt,tasks,~!Local,lastTask!~,description,~!Local,description!~
		clear

	elseIf ~!Local,update!~,==,silent,
		# Don't complain if we already have it.
		clear

	else
		debug 0,addTask: ~!Local,name!~ already exists.

clear
nested
